#include "quantum.h"
#include QMK_KEYBOARD_H

enum layers {
    {% for layer in layers %}
        {{ layer["name"] }}{% if loop.index == 1 %}= 0{% endif %}{% if loop.index < layers|length %},{% endif%}
    {% endfor %}
};

enum my_keycodes {
    {{ magic_key }} = SAFE_RANGE
};

#define {{ layout_name }}( \
    k00, k01, k02, k03, k04, k05, k06, k07, k08, k09, k0a, k0b, k0c, k0d, k0e, \
    k10,      k12, k13, k14, k15, k16, k17, k18, k19, k1a, k1b, k1c, k1d, k1e, \
    k20,      k22, k23, k24, k25, k26, k27, k28, k29, k2a, k2b, k2c, k2d,      \
    k30,      k32, k33, k34, k35, k36, k37, k38, k39, k3a, k3b,      k3d, k3e, \
    k40, k41,      k43, k44,      k46,      k48,      k4a, k4b, k4c, k4d, k4e  \
) { \
    { k00, k01,   k02,   k03, k04,   k05,   k06, k07,   k08,   k09,   k0a, k0b, k0c,   k0d,   k0e   }, \
    { k10, KC_NO, k12,   k13, k14,   k15,   k16, k17,   k18,   k19,   k1a, k1b, k1c,   k1d,   k1e   }, \
    { k20, KC_NO, k22,   k23, k24,   k25,   k26, k27,   k28,   k29,   k2a, k2b, k2c,   k2d,   KC_NO }, \
    { k30, KC_NO, k32,   k33, k34,   k35,   k36, k37,   k38,   k39,   k3a, k3b, KC_NO, k3d,   k3e   }, \
    { k40,  k41,   KC_NO, k43,  k44,  KC_NO, k46,  KC_NO, k48,  KC_NO, k4a,  k4b,  k4c,   k4d,  k4e }  \
}


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    {% for layer in layers %}
    [{{ layer["name"] }}] = {{ layout_name }}(
{{ layer["keys"] }}
    ){{ layer["separator"] }}
    {% endfor %}
};

void eeconfig_init_user(void) {
    set_unicode_input_mode({{ unicode_input_mode }});
};

static uint16_t key_timer;
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  // See https://www.reddit.com/r/olkb/comments/72wuxs/qmk_best_way_to_setup_a_key_to_switch_to_layer_a/
  switch (keycode) {
    case {{ magic_key }}:
        if(record->event.pressed){
            key_timer = timer_read();
            layer_on({{ magic_key_layer_hold }});
        } 
        else {
            layer_off({{ magic_key_layer_hold }});
            if(timer_elapsed(key_timer) < 150) {
                if(IS_LAYER_ON({{ magic_key_layer_tap }})) {
                    layer_off({{ magic_key_layer_tap }});
                }
                else{
                    layer_on({{ magic_key_layer_tap }});
                }
            }
            else{
            }
        }
        return false;
        break;
    default:
        return true;
  }
}
